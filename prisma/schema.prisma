generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//
// Authentication and onboarding
//

model SessionToken {
    id String @id @default(cuid())

    // Tokens
    key       String  @unique
    keyGithub String?

    // Login
    login  String
    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    // Meta
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OnboardingState {
    login     String  @id
    username  String? @unique
    firstName String?
    lastName  String?
    photo     Json?
}

//
// User
//

model User {
    id String @id @default(cuid())

    // Connection info
    login String

    // Profile
    username  String
    firstName String
    lastName  String?
    photo     Json?

    // Flags
    bot          Boolean @default(false)
    system       Boolean @default(false)
    experimental Boolean @default(false)
    developer    Boolean @default(false)

    // Meta
    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    // Tokens
    SessionToken SessionToken[]
    Update       Update[]
    PushTokens   PushTokens[]
    Feed         Feed[]
    FeedItem     FeedItem[]
}

model UserRelationship {
    sourceId String
    targetId String
    follows  Boolean

    @@id([sourceId, targetId])
}

model Feed {
    id Int @id @default(autoincrement())

    // Reference
    userId   String
    user     User       @relation(fields: [userId], references: [id])
    tag      String
    FeedItem FeedItem[]

    // State
    seq Int @default(0)

    @@unique([userId, tag])
}

model FeedItem {
    // ID
    fid  Int
    feed Feed @relation(fields: [fid], references: [id])
    seq  Int

    // Data
    byId    String
    by      User   @relation(fields: [byId], references: [id])
    content Json

    // Meta
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([fid, seq])
}

//
// GitHub Integration
//

model GithubProfile {
    id        String  @id
    username  String
    firstName String
    lastName  String?
    photo     Json?
}

model GithubRelations {
    sourceId   String
    targetId   String
    follows    Boolean
    followsAny Boolean

    @@id([sourceId, targetId])
}

//
// Push Notifications
//

model PushTokens {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//
// Updates
//

model Update {
    // Connection info
    userId String
    seq    Int
    user   User   @relation(fields: [userId], references: [id])

    // Data
    repeatKey String?
    data      Json

    // Meta
    createdAt DateTime @default(now())

    // PK
    @@unique([userId, seq])
}

//
// Utilities
//

model SimpleCache {
    key   String @id
    value String
}

model GlobalLock {
    key     String   @id @default(cuid())
    value   String
    timeout DateTime
}

model RepeatKey {
    key       String   @id
    value     String
    createdAt DateTime @default(now())
    expiresAt DateTime
}
